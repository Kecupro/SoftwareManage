const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Import models
const User = require('./models/user.model');
const Partner = require('./models/partner.model');
const Project = require('./models/project.model');
const Module = require('./models/module.model');
const Sprint = require('./models/sprint.model');
const UserStory = require('./models/user-story.model');
const Task = require('./models/task.model');
const Bug = require('./models/bug.model');
const ModuleRequest = require('./models/module-request.model');

// Sample data arrays
const SAMPLE_NAMES = [
  'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ Ho√†ng C∆∞·ªùng', 'Ph·∫°m Minh D≈©ng', 'Ho√†ng Th·ªã Em',
  'V≈© Quang Ph√∫c', 'ƒê·∫∑ng Th·ªã Giang', 'B√πi VƒÉn H√πng', 'Ng√¥ Th·ªã I', 'L√Ω VƒÉn Khoa',
  'ƒê·ªó Th·ªã Lan', 'Mai VƒÉn Minh', 'T√¥ Th·ªã Ng·ªçc', 'V√µ VƒÉn Ph∆∞∆°ng', 'H·ªì Th·ªã Qu·ª≥nh',
  'D∆∞∆°ng VƒÉn R·ªìng', 'L∆∞u Th·ªã S∆∞∆°ng', 'Tr·ªãnh VƒÉn T√¢m', 'ƒêinh Th·ªã Uy√™n', 'V∆∞∆°ng VƒÉn Vi·ªát'
];

const SAMPLE_COMPANIES = [
  'C√¥ng ty TNHH ABC', 'T·∫≠p ƒëo√†n XYZ', 'C√¥ng ty CP DEF', 'Doanh nghi·ªáp GHI',
  'C√¥ng ty TNHH JKL', 'T·∫≠p ƒëo√†n MNO', 'C√¥ng ty CP PQR', 'Doanh nghi·ªáp STU',
  'C√¥ng ty TNHH VWX', 'T·∫≠p ƒëo√†n YZA', 'C√¥ng ty CP BCD', 'Doanh nghi·ªáp EFG'
];

const SAMPLE_PROJECTS = [
  'H·ªá th·ªëng Qu·∫£n l√Ω Kh√°ch h√†ng', '·ª®ng d·ª•ng Mobile Banking', 'Website Th∆∞∆°ng m·∫°i ƒêi·ªán t·ª≠',
  'H·ªá th·ªëng ERP', '·ª®ng d·ª•ng ƒê·∫∑t xe', 'Website Tin t·ª©c', 'H·ªá th·ªëng Qu·∫£n l√Ω Kho',
  '·ª®ng d·ª•ng Gi√°o d·ª•c', 'Website Du l·ªãch', 'H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±',
  '·ª®ng d·ª•ng Y t·∫ø', 'Website B·∫•t ƒë·ªông s·∫£n', 'H·ªá th·ªëng Qu·∫£n l√Ω T√†i ch√≠nh',
  '·ª®ng d·ª•ng Th·ª±c ph·∫©m', 'Website Th·ªùi trang', 'H·ªá th·ªëng Qu·∫£n l√Ω V·∫≠n t·∫£i'
];

const SAMPLE_MODULES = [
  'Qu·∫£n l√Ω Ng∆∞·ªùi d√πng', 'X√°c th·ª±c & Ph√¢n quy·ªÅn', 'Qu·∫£n l√Ω D·ªØ li·ªáu', 'B√°o c√°o & Th·ªëng k√™',
  'T√≠ch h·ª£p API', 'Giao di·ªán Admin', 'Qu·∫£n l√Ω File', 'Th√¥ng b√°o & Email',
  'Qu·∫£n l√Ω C·∫•u h√¨nh', 'Backup & Restore', 'Qu·∫£n l√Ω Log', 'T·ªëi ∆∞u Performance',
  'Qu·∫£n l√Ω Cache', 'Monitoring', 'Qu·∫£n l√Ω Database', 'Qu·∫£n l√Ω Security'
];

const SAMPLE_USER_STORIES = [
  'L√† ng∆∞·ªùi d√πng, t√¥i mu·ªën ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p h·ªá th·ªëng',
  'L√† admin, t√¥i mu·ªën qu·∫£n l√Ω danh s√°ch ng∆∞·ªùi d√πng',
  'L√† user, t√¥i mu·ªën xem b√°o c√°o th·ªëng k√™',
  'L√† manager, t√¥i mu·ªën t·∫°o d·ª± √°n m·ªõi',
  'L√† developer, t√¥i mu·ªën xem danh s√°ch task',
  'L√† tester, t√¥i mu·ªën b√°o c√°o bug',
  'L√† user, t√¥i mu·ªën t√¨m ki·∫øm th√¥ng tin',
  'L√† admin, t√¥i mu·ªën c·∫•u h√¨nh h·ªá th·ªëng',
  'L√† user, t√¥i mu·ªën xu·∫•t d·ªØ li·ªáu ra Excel',
  'L√† manager, t√¥i mu·ªën theo d√µi ti·∫øn ƒë·ªô d·ª± √°n'
];

const SAMPLE_TASKS = [
  'Thi·∫øt k·∫ø database schema', 'T·∫°o API endpoints', 'Vi·∫øt unit tests',
  'Implement authentication', 'T·∫°o giao di·ªán admin', 'T√≠ch h·ª£p third-party API',
  'Optimize database queries', 'Implement caching', 'Setup CI/CD pipeline',
  'Write documentation', 'Code review', 'Bug fixing', 'Performance testing',
  'Security audit', 'Deploy to staging', 'User acceptance testing'
];

const SAMPLE_BUGS = [
  'Login kh√¥ng ho·∫°t ƒë·ªông tr√™n mobile', 'Data kh√¥ng sync gi·ªØa c√°c tab',
  'Performance ch·∫≠m khi load nhi·ªÅu d·ªØ li·ªáu', 'UI b·ªã l·ªói tr√™n Safari',
  'API tr·∫£ v·ªÅ l·ªói 500', 'Validation kh√¥ng ho·∫°t ƒë·ªông', 'File upload b·ªã l·ªói',
  'Search kh√¥ng t√¨m ƒë∆∞·ª£c k·∫øt qu·∫£', 'Export Excel b·ªã l·ªói format',
  'Notification kh√¥ng g·ª≠i ƒë∆∞·ª£c email', 'Cache kh√¥ng update', 'Database connection timeout'
];

async function createMassiveSampleData() {
  try {
    // K·∫øt n·ªëi MongoDB
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');

    // X√≥a d·ªØ li·ªáu c≈©
    console.log('üóëÔ∏è X√≥a d·ªØ li·ªáu c≈©...');
    await User.deleteMany({});
    await Partner.deleteMany({});
    await Project.deleteMany({});
    await Module.deleteMany({});
    await Sprint.deleteMany({});
    await UserStory.deleteMany({});
    await Task.deleteMany({});
    await Bug.deleteMany({});
    await ModuleRequest.deleteMany({});

    // T·∫°o Users (50 users)
    console.log('üë• T·∫°o users...');
    const users = [];
    const roles = ['admin', 'ba', 'po', 'pm', 'dev', 'qa', 'devops'];
    
    for (let i = 0; i < 50; i++) {
      const user = new User({
        username: `user${i + 1}`,
        email: `user${i + 1}@example.com`,
        password: 'Test123!',
        fullName: SAMPLE_NAMES[i % SAMPLE_NAMES.length],
        role: roles[i % roles.length],
        isActive: true,
        status: 'active',
        profile: {
          phone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
          address: `ƒê·ªãa ch·ªâ ${i + 1}, TP.HCM`,
          avatar: `https://ui-avatars.com/api/?name=${SAMPLE_NAMES[i % SAMPLE_NAMES.length]}&background=random`
        }
      });
      users.push(await user.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${users.length} users`);

    // T·∫°o Partners (20 partners)
    console.log('ü§ù T·∫°o partners...');
    const partners = [];
    for (let i = 0; i < 20; i++) {
      const partner = new Partner({
        code: `P${String(i + 1).padStart(3, '0')}`,
        name: SAMPLE_COMPANIES[i % SAMPLE_COMPANIES.length],
        contact: {
          primaryContact: {
            name: SAMPLE_NAMES[i % SAMPLE_NAMES.length],
            email: `partner${i + 1}@company.com`,
            phone: `0${Math.floor(Math.random() * 900000000) + 100000000}`,
            position: 'Manager'
          },
          address: {
            street: `ƒê·ªãa ch·ªâ c√¥ng ty ${i + 1}`,
            city: 'TP.HCM',
            state: 'HCM',
            country: 'Vietnam',
            zipCode: '70000'
          },
          website: `https://company${i + 1}.com`
        },
        business: {
          type: ['startup', 'sme', 'enterprise', 'government', 'other'][Math.floor(Math.random() * 5)],
          industry: 'Technology',
          size: ['1-10', '11-50', '51-200', '201-1000', '1000+'][Math.floor(Math.random() * 5)],
          foundedYear: 2010 + Math.floor(Math.random() * 14),
          taxCode: `0123456789${String(i).padStart(3, '0')}`
        },
        status: 'active',
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      partners.push(await partner.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${partners.length} partners`);

    // T·∫°o Projects (30 projects)
    console.log('üìã T·∫°o projects...');
    const projects = [];
    for (let i = 0; i < 30; i++) {
      const project = new Project({
        name: SAMPLE_PROJECTS[i % SAMPLE_PROJECTS.length],
        description: `M√¥ t·∫£ chi ti·∫øt cho d·ª± √°n ${SAMPLE_PROJECTS[i % SAMPLE_PROJECTS.length]}`,
        code: `PRJ${String(i + 1).padStart(3, '0')}`,
        status: ['planning', 'active', 'on-hold', 'completed', 'cancelled'][Math.floor(Math.random() * 5)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        partner: {
          id: partners[Math.floor(Math.random() * partners.length)]._id,
          name: partners[Math.floor(Math.random() * partners.length)].name,
          contactPerson: partners[Math.floor(Math.random() * partners.length)].contact.primaryContact.name,
          email: partners[Math.floor(Math.random() * partners.length)].contact.primaryContact.email,
          phone: partners[Math.floor(Math.random() * partners.length)].contact.primaryContact.phone
        },
        team: {
          productOwner: users[Math.floor(Math.random() * users.length)]._id,
          projectManager: users[Math.floor(Math.random() * users.length)]._id,
          businessAnalyst: users[Math.floor(Math.random() * users.length)]._id,
          developers: [users[Math.floor(Math.random() * users.length)]._id, users[Math.floor(Math.random() * users.length)]._id],
          testers: [users[Math.floor(Math.random() * users.length)]._id],
          devops: [users[Math.floor(Math.random() * users.length)]._id]
        },
        timeline: {
          startDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
          endDate: new Date(Date.now() + Math.random() * 365 * 24 * 60 * 60 * 1000),
          estimatedDuration: Math.floor(Math.random() * 180) + 30,
          actualDuration: Math.floor(Math.random() * 180) + 30
        },
        statistics: {
          totalModules: Math.floor(Math.random() * 20) + 5,
          completedModules: Math.floor(Math.random() * 15) + 2,
          totalUserStories: Math.floor(Math.random() * 100) + 20,
          completedUserStories: Math.floor(Math.random() * 80) + 10,
          totalTasks: Math.floor(Math.random() * 500) + 100,
          completedTasks: Math.floor(Math.random() * 400) + 80,
          totalBugs: Math.floor(Math.random() * 50) + 10,
          resolvedBugs: Math.floor(Math.random() * 40) + 5,
          testCoverage: Math.floor(Math.random() * 30) + 70
        },
        createdBy: users[Math.floor(Math.random() * users.length)]._id,
        gitConfig: {
          repository: `https://github.com/example/repo${i + 1}.git`
        }
      });
      projects.push(await project.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${projects.length} projects`);

    // T·∫°o Modules (100 modules)
    console.log('üì¶ T·∫°o modules...');
    const modules = [];
    for (let i = 0; i < 100; i++) {
      const module = new Module({
        name: SAMPLE_MODULES[i % SAMPLE_MODULES.length],
        description: `M√¥ t·∫£ chi ti·∫øt cho module ${SAMPLE_MODULES[i % SAMPLE_MODULES.length]}`,
        code: `MOD${String(i + 1).padStart(3, '0')}`,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        status: ['planning', 'in-development', 'testing', 'completed', 'delivered', 'maintenance'][Math.floor(Math.random() * 6)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        assignedTo: users[Math.floor(Math.random() * users.length)]._id,
        estimatedHours: Math.floor(Math.random() * 80) + 20,
        actualHours: Math.floor(Math.random() * 100) + 15,
        progress: Math.floor(Math.random() * 100),
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      modules.push(await module.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${modules.length} modules`);

    // T·∫°o Sprints (50 sprints)
    console.log('üèÉ T·∫°o sprints...');
    const sprints = [];
    for (let i = 0; i < 50; i++) {
      const startDate = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000);
      const endDate = new Date(startDate.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000);
      const duration = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)); // s·ªë ng√†y
      
      const sprint = new Sprint({
        name: `Sprint ${i + 1}`,
        code: `SPR${String(i + 1).padStart(3, '0')}`,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        timeline: {
          startDate: startDate,
          endDate: endDate,
          duration: duration
        },
        status: ['planning', 'active', 'completed', 'cancelled'][Math.floor(Math.random() * 4)],
        goal: `M·ª•c ti√™u c·ªßa Sprint ${i + 1}`,
        velocity: Math.floor(Math.random() * 50) + 20,
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      sprints.push(await sprint.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${sprints.length} sprints`);

    // T·∫°o User Stories (200 user stories)
    console.log('üìñ T·∫°o user stories...');
    const userStories = [];
    for (let i = 0; i < 200; i++) {
      const userStory = new UserStory({
        title: SAMPLE_USER_STORIES[i % SAMPLE_USER_STORIES.length],
        description: `M√¥ t·∫£ chi ti·∫øt cho user story ${i + 1}`,
        code: `US${String(i + 1).padStart(3, '0')}`,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        module: modules[Math.floor(Math.random() * modules.length)]._id,
        sprint: sprints[Math.floor(Math.random() * sprints.length)]._id,
        userStory: {
          asA: 'user',
          iWant: SAMPLE_USER_STORIES[i % SAMPLE_USER_STORIES.length],
          soThat: 'I can achieve my goal'
        },
        status: ['backlog', 'sprint-backlog', 'in-progress', 'testing', 'completed', 'accepted', 'rejected'][Math.floor(Math.random() * 7)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        estimation: {
          storyPoints: Math.floor(Math.random() * 13) + 1
        },
        assignedTo: users[Math.floor(Math.random() * users.length)]._id,
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      userStories.push(await userStory.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${userStories.length} user stories`);

    // T·∫°o Tasks (500 tasks)
    console.log('‚úÖ T·∫°o tasks...');
    const tasks = [];
    for (let i = 0; i < 500; i++) {
      const task = new Task({
        title: SAMPLE_TASKS[i % SAMPLE_TASKS.length],
        description: `M√¥ t·∫£ chi ti·∫øt cho task ${i + 1}`,
        code: `TASK${String(i + 1).padStart(3, '0')}`,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        module: modules[Math.floor(Math.random() * modules.length)]._id,
        userStory: userStories[Math.floor(Math.random() * userStories.length)]._id,
        sprint: sprints[Math.floor(Math.random() * sprints.length)]._id,
        status: ['todo', 'in-progress', 'in-review', 'done', 'blocked'][Math.floor(Math.random() * 5)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        type: ['feature', 'bugfix', 'design', 'testing', 'documentation', 'bug', 'chore', 'epic'][Math.floor(Math.random() * 8)],
        estimatedHours: Math.floor(Math.random() * 16) + 2,
        actualHours: Math.floor(Math.random() * 20) + 1,
        assignee: users[Math.floor(Math.random() * users.length)]._id,
        reporter: users[Math.floor(Math.random() * users.length)]._id,
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      tasks.push(await task.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${tasks.length} tasks`);

    // T·∫°o Bugs (100 bugs)
    console.log('üêõ T·∫°o bugs...');
    const bugs = [];
    for (let i = 0; i < 100; i++) {
      const bug = new Bug({
        title: SAMPLE_BUGS[i % SAMPLE_BUGS.length],
        description: `M√¥ t·∫£ chi ti·∫øt cho bug ${i + 1}`,
        code: `BUG${String(i + 1).padStart(3, '0')}`,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        module: modules[Math.floor(Math.random() * modules.length)]._id,
        status: ['open', 'in-progress', 'testing', 'resolved', 'closed', 'reopened'][Math.floor(Math.random() * 6)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        severity: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        type: ['functional', 'performance', 'security', 'ui-ux', 'compatibility', 'data', 'other'][Math.floor(Math.random() * 7)],
        environment: ['development', 'staging', 'production'][Math.floor(Math.random() * 3)],
        assignedTo: users[Math.floor(Math.random() * users.length)]._id,
        reportedBy: users[Math.floor(Math.random() * users.length)]._id,
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      bugs.push(await bug.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${bugs.length} bugs`);

    // T·∫°o Module Requests (50 requests)
    console.log('üìù T·∫°o module requests...');
    const moduleRequests = [];
    for (let i = 0; i < 50; i++) {
      const moduleRequest = new ModuleRequest({
        name: `Y√™u c·∫ßu module ${i + 1}`,
        description: `M√¥ t·∫£ chi ti·∫øt cho y√™u c·∫ßu module ${i + 1}`,
        code: `MR${String(i + 1).padStart(3, '0')}`,
        partner: partners[Math.floor(Math.random() * partners.length)]._id,
        project: projects[Math.floor(Math.random() * projects.length)]._id,
        status: ['pending', 'approved', 'rejected', 'in-progress', 'completed'][Math.floor(Math.random() * 5)],
        priority: ['low', 'medium', 'high', 'critical'][Math.floor(Math.random() * 4)],
        estimatedHours: Math.floor(Math.random() * 80) + 20,
        requestedBy: users[Math.floor(Math.random() * users.length)]._id,
        createdBy: users[Math.floor(Math.random() * users.length)]._id
      });
      moduleRequests.push(await moduleRequest.save());
    }
    console.log(`‚úÖ ƒê√£ t·∫°o ${moduleRequests.length} module requests`);

    console.log('üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!');
    console.log('üìä T·ªïng k·∫øt:');
    console.log(`   üë• Users: ${users.length}`);
    console.log(`   ü§ù Partners: ${partners.length}`);
    console.log(`   üìã Projects: ${projects.length}`);
    console.log(`   üì¶ Modules: ${modules.length}`);
    console.log(`   üèÉ Sprints: ${sprints.length}`);
    console.log(`   üìñ User Stories: ${userStories.length}`);
    console.log(`   ‚úÖ Tasks: ${tasks.length}`);
    console.log(`   üêõ Bugs: ${bugs.length}`);
    console.log(`   üìù Module Requests: ${moduleRequests.length}`);

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o d·ªØ li·ªáu m·∫´u:', error);
  } finally {
    await mongoose.connection.close();
    console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

createMassiveSampleData(); 