const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/user.model');
const { authMiddleware, checkRole } = require('../middleware/auth.middleware');

const router = express.Router();

// Validation rules
const registerValidation = [
  body('username')
    .isLength({ min: 3, max: 50 })
    .withMessage('Username ph·∫£i c√≥ t·ª´ 3-50 k√Ω t·ª±')
    .matches(/^[a-zA-Z0-9_]+$/)
    .withMessage('Username ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi'),
  body('email')
    .isEmail()
    .withMessage('Email kh√¥ng h·ª£p l·ªá')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 })
    .withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë'),
  body('fullName')
    .isLength({ min: 2, max: 100 })
    .withMessage('H·ªç t√™n ph·∫£i c√≥ t·ª´ 2-100 k√Ω t·ª±'),
  body('role')
    .isIn(['partner', 'ba', 'po', 'pm', 'dev', 'qa', 'devops', 'admin'])
    .withMessage('Vai tr√≤ kh√¥ng h·ª£p l·ªá')
];

const publicRegisterValidation = [
  body('fullName')
    .isLength({ min: 2, max: 100 })
    .withMessage('H·ªç t√™n ph·∫£i c√≥ t·ª´ 2-100 k√Ω t·ª±'),
  body('email')
    .isEmail()
    .withMessage('Email kh√¥ng h·ª£p l·ªá')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 })
    .withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
  body('phone')
    .notEmpty()
    .withMessage('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('department')
    .notEmpty()
    .withMessage('Ph√≤ng ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('role')
    .isIn(['dev', 'qa', 'ba', 'po', 'pm', 'devops'])
    .withMessage('Vai tr√≤ kh√¥ng h·ª£p l·ªá')
];

const partnerRegisterValidation = [
  body('companyName')
    .isLength({ min: 2, max: 200 })
    .withMessage('T√™n c√¥ng ty ph·∫£i c√≥ t·ª´ 2-200 k√Ω t·ª±'),
  body('contactPerson')
    .isLength({ min: 2, max: 100 })
    .withMessage('Ng∆∞·ªùi ƒë·∫°i di·ªán ph·∫£i c√≥ t·ª´ 2-100 k√Ω t·ª±'),
  body('email')
    .isEmail()
    .withMessage('Email kh√¥ng h·ª£p l·ªá')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 })
    .withMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
  body('phone')
    .notEmpty()
    .withMessage('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('address')
    .notEmpty()
    .withMessage('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('taxCode')
    .notEmpty()
    .withMessage('M√£ s·ªë thu·∫ø kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('businessType')
    .notEmpty()
    .withMessage('Lo·∫°i h√¨nh kinh doanh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
];

const loginValidation = [
  body('email')
    .isEmail()
    .withMessage('Email kh√¥ng h·ª£p l·ªá')
    .normalizeEmail(),
  body('password')
    .notEmpty()
    .withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
];

// @route   POST /api/auth/register-admin
// @desc    ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (ch·ªâ admin m·ªõi c√≥ th·ªÉ t·∫°o t√†i kho·∫£n)
// @access  Private (Admin only)
router.post('/register-admin', authMiddleware, checkRole('admin'), registerValidation, async (req, res) => {
  try {
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }

    const { username, email, password, fullName, role, profile } = req.body;

    // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
    const existingUsername = await User.findOne({ username });
    if (existingUsername) {
      return res.status(400).json({
        success: false,
        message: 'Username ƒë√£ t·ªìn t·∫°i'
      });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ t·ªìn t·∫°i'
      });
    }

    // T·∫°o user m·ªõi
    const user = new User({
      username,
      email,
      password,
      fullName,
      role,
      profile,
      isActive: true,
      status: 'active'
    });

    await user.save();

    res.status(201).json({
      success: true,
      message: 'T·∫°o t√†i kho·∫£n th√†nh c√¥ng',
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          profile: user.profile
        }
      }
    });
  } catch (error) {
    console.error('Register admin error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
    }
});

// @route   POST /api/auth/login
// @desc    ƒêƒÉng nh·∫≠p
// @access  Public
router.post('/login', loginValidation, async (req, res) => {
  try {
    console.log('üîê Login attempt - Request body:', req.body);
    
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('‚ùå Validation errors:', errors.array());
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }

    const { email, password } = req.body;
    console.log('üìß Looking for user with email:', email);

    // T√¨m user theo email
        const user = await User.findOne({ email });
        if (!user) {
      console.log('‚ùå User not found for email:', email);
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    console.log('‚úÖ User found:', {
      id: user._id,
      email: user.email,
      username: user.username,
      role: user.role,
      isActive: user.isActive,
      status: user.status
    });

    // Ki·ªÉm tra user c√≥ active kh√¥ng
    if (!user.isActive) {
      console.log('‚ùå User is not active:', user.email);
      return res.status(401).json({
        success: false,
        message: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a'
      });
    }

    console.log('üîë Comparing password...');
    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isPasswordValid = await user.comparePassword(password);
    console.log('üîë Password validation result:', isPasswordValid);
    
    if (!isPasswordValid) {
      console.log('‚ùå Password is invalid for user:', user.email);
      return res.status(401).json({
        success: false,
        message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
      });
    }

    console.log('‚úÖ Password is valid, creating JWT token...');
    // T·∫°o JWT token
        const payload = {
      userId: user._id,
      username: user.username,
      email: user.email,
                role: user.role
        };

    const token = jwt.sign(
            payload,
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '24h' }
    );

    // C·∫≠p nh·∫≠t lastLogin
    user.lastLogin = new Date();
    await user.save();

    console.log('‚úÖ Login successful for user:', user.email);
    res.json({
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          profile: user.profile,
          dataScope: user.dataScope,
          notifications: user.notifications
        },
        token
      }
    });
  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   GET /api/auth/me
// @desc    L·∫•y th√¥ng tin user hi·ªán t·∫°i
// @access  Private
router.get('/me', authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    
    res.json({
      success: true,
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          profile: user.profile,
          dataScope: user.dataScope,
          notifications: user.notifications,
          lastLogin: user.lastLogin,
          createdAt: user.createdAt
        }
      }
    });
  } catch (error) {
    console.error('Get user error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   PUT /api/auth/profile
// @desc    C·∫≠p nh·∫≠t th√¥ng tin profile
// @access  Private
router.put('/profile', authMiddleware, async (req, res) => {
  try {
    const { fullName, profile, notifications } = req.body;
    
    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin
    if (fullName) user.fullName = fullName;
    if (profile) user.profile = { ...user.profile, ...profile };
    if (notifications) user.notifications = { ...user.notifications, ...notifications };

    await user.save();

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t profile th√†nh c√¥ng',
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          profile: user.profile,
          notifications: user.notifications
        }
      }
    });
  } catch (error) {
    console.error('Update profile error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   PUT /api/auth/change-password
// @desc    ƒê·ªïi m·∫≠t kh·∫©u
// @access  Private
router.put('/change-password', authMiddleware, [
  body('currentPassword')
    .notEmpty()
    .withMessage('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),
  body('newPassword')
    .isLength({ min: 6 })
    .withMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë')
], async (req, res) => {
  try {
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }

    const { currentPassword, newPassword } = req.body;

    const user = await User.findById(req.user._id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isCurrentPasswordValid = await user.comparePassword(currentPassword);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'
      });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;
    await user.save();

    res.json({
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Change password error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   GET /api/auth/users
// @desc    L·∫•y danh s√°ch users (ch·ªâ admin)
// @access  Private (Admin only)
router.get('/users', authMiddleware, checkRole('admin'), async (req, res) => {
  try {
    const { page = 1, limit = 10, role, search } = req.query;
    
    const query = {};
    if (role) query.role = role;
    if (search) {
      query.$or = [
        { username: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { fullName: { $regex: search, $options: 'i' } }
      ];
    }

    const users = await User.find(query)
      .select('-password')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .exec();

    const total = await User.countDocuments(query);

    res.json({
      success: true,
      data: {
        users,
        pagination: {
          currentPage: page,
          totalPages: Math.ceil(total / limit),
          totalUsers: total,
          hasNextPage: page * limit < total,
          hasPrevPage: page > 1
        }
      }
    });
  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   PUT /api/auth/users/:id/status
// @desc    C·∫≠p nh·∫≠t tr·∫°ng th√°i user (ch·ªâ admin)
// @access  Private (Admin only)
router.put('/users/:id/status', authMiddleware, checkRole('admin'), async (req, res) => {
  try {
    const { isActive } = req.body;
    const { id } = req.params;

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y user'
      });
    }

    user.isActive = isActive;
    await user.save();

    res.json({
      success: true,
      message: `ƒê√£ ${isActive ? 'k√≠ch ho·∫°t' : 'kh√≥a'} t√†i kho·∫£n th√†nh c√¥ng`,
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          fullName: user.fullName,
          role: user.role,
          isActive: user.isActive
        }
      }
    });
  } catch (error) {
    console.error('Update user status error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   POST /api/auth/register
// @desc    ƒêƒÉng k√Ω t√†i kho·∫£n c√¥ng khai (cho nh√¢n vi√™n)
// @access  Public
router.post('/register', publicRegisterValidation, async (req, res) => {
  try {
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }

    const { fullName, email, password, phone, department, role } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ t·ªìn t·∫°i'
      });
    }

    // T·∫°o username t·ª´ email
    const username = email.split('@')[0];

    // T·∫°o user m·ªõi v·ªõi role ƒë∆∞·ª£c ch·ªçn
    const user = new User({
      username,
      email,
      password,
      fullName,
      role,
      profile: {
        phone,
        department
      },
      isActive: true, // T·ª± ƒë·ªông k√≠ch ho·∫°t cho demo
      status: 'active'
    });

    await user.save();

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.'
    });
  } catch (error) {
    console.error('Public register error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

// @route   POST /api/auth/register-partner
// @desc    ƒêƒÉng k√Ω t√†i kho·∫£n ƒë·ªëi t√°c
// @access  Public
router.post('/register-partner', partnerRegisterValidation, async (req, res) => {
  try {
    // Ki·ªÉm tra validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors: errors.array()
      });
    }

    const { 
      companyName, 
      contactPerson, 
      email, 
      password, 
      phone, 
      address, 
      taxCode, 
      website, 
      businessType, 
      description 
    } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({
        success: false,
        message: 'Email ƒë√£ t·ªìn t·∫°i'
      });
    }

    // T·∫°o username t·ª´ email
    const username = email.split('@')[0];

    // T·∫°o user m·ªõi v·ªõi role 'partner'
    const user = new User({
      username,
      email,
      password,
      fullName: contactPerson,
      role: 'partner',
      profile: {
        companyName,
        phone,
        address,
        taxCode,
        website,
        businessType,
        description
      },
      isActive: false, // C·∫ßn admin k√≠ch ho·∫°t
      status: 'pending'
    });

    await user.save();

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω ƒë·ªëi t√°c th√†nh c√¥ng! T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t sau khi admin x√°c nh·∫≠n.'
    });
  } catch (error) {
    console.error('Partner register error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server'
    });
  }
});

module.exports = router;