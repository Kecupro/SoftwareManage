name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      - name: Build frontend
        run: |
          cd client
          npm run build

      - name: Run backend tests (if any)
        run: |
          cd server
          npm test --if-present

  build-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/software-dev-management:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/software-dev-management:latest
            
            # Stop and remove old container
            docker stop software-dev-management || true
            docker rm software-dev-management || true
            
            # Run new container
            docker run -d \
              --name software-dev-management \
              --restart unless-stopped \
              -p 5000:5000 \
              --env-file /path/to/your/.env \
              ${{ secrets.DOCKER_USERNAME }}/software-dev-management:latest
            
            # Clean up old images
            docker image prune -f 