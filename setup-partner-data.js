const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./models/user.model');
const Partner = require('./models/partner.model');
const Project = require('./models/project.model');
const Module = require('./models/module.model');

async function setupPartnerData() {
  try {
    // K·∫øt n·ªëi database
    await mongoose.connect('mongodb://localhost:27017/software-dev-management');
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
    console.log('üóÑÔ∏è Database: software-dev-management');

    console.log('\nüöÄ B·∫Øt ƒë·∫ßu setup d·ªØ li·ªáu ƒë·ªëi t√°c...\n');

    // 1. T·∫°o ho·∫∑c t√¨m admin user
    console.log('1Ô∏è‚É£ T·∫°o admin user...');
    let adminUser = await User.findOne({ 
      $or: [
        { email: 'admin@devmanagement.com' },
        { username: 'admin' }
      ]
    });
    
    if (!adminUser) {
      try {
        const hashedPassword = await bcrypt.hash('admin123', 10);
        adminUser = new User({
          username: 'admin',
          email: 'admin@devmanagement.com',
          password: hashedPassword,
          fullName: 'Administrator',
          role: 'admin',
          status: 'active'
        });
        await adminUser.save();
        console.log('   ‚úÖ T·∫°o m·ªõi admin user');
      } catch (error) {
        if (error.code === 11000) {
          console.log('   ‚ÑπÔ∏è Admin user ƒë√£ t·ªìn t·∫°i (duplicate key)');
          adminUser = await User.findOne({ username: 'admin' });
        } else {
          throw error;
        }
      }
    } else {
      console.log('   ‚ÑπÔ∏è Admin user ƒë√£ t·ªìn t·∫°i');
    }

    // 2. T·∫°o ho·∫∑c t√¨m partner
    console.log('\n2Ô∏è‚É£ T·∫°o partner...');
    let partner = await Partner.findOne({ code: 'TECH_PARTNER' });
    
    if (!partner) {
      const partnerData = {
        name: 'Tech Solutions Partner',
        code: 'TECH_PARTNER',
        description: 'ƒê·ªëi t√°c ph√°t tri·ªÉn ph·∫ßn m·ªÅm chuy√™n nghi·ªáp',
        contact: {
          primaryContact: {
            name: 'Nguy·ªÖn VƒÉn ƒê·ªëi T√°c',
            email: 'partner@techsolutions.com',
            phone: '0901234567',
            position: 'Gi√°m ƒë·ªëc k·ªπ thu·∫≠t'
          },
          address: {
            street: '123 ƒê∆∞·ªùng ABC',
            city: 'H√† N·ªôi',
            country: 'Vi·ªát Nam'
          },
          website: 'https://techsolutions.com'
        },
        business: {
          type: 'enterprise',
          industry: 'Software Development',
          size: '51-200',
          foundedYear: 2018
        },
        status: 'active',
        createdBy: adminUser._id
      };
      
      partner = new Partner(partnerData);
      await partner.save();
      console.log('   ‚úÖ T·∫°o m·ªõi partner');
    } else {
      console.log('   ‚ÑπÔ∏è Partner ƒë√£ t·ªìn t·∫°i');
    }

    // 3. T·∫°o ho·∫∑c t√¨m partner user
    console.log('\n3Ô∏è‚É£ T·∫°o partner user...');
    let partnerUser = await User.findOne({ email: 'partner@techsolutions.com' });
    
    if (!partnerUser) {
      const partnerHashedPassword = await bcrypt.hash('partner123', 10);
      const userData = {
        username: 'partner_user',
        email: 'partner@techsolutions.com',
        password: partnerHashedPassword,
        fullName: 'Nguy·ªÖn VƒÉn ƒê·ªëi T√°c',
        role: 'partner',
        status: 'active',
        dataScope: {
          partners: [partner._id]
        }
      };
      
      partnerUser = new User(userData);
      await partnerUser.save();
      console.log('   ‚úÖ T·∫°o m·ªõi partner user');
    } else {
      console.log('   ‚ÑπÔ∏è Partner user ƒë√£ t·ªìn t·∫°i');
    }

    // 4. T·∫°o ho·∫∑c t√¨m project
    console.log('\n4Ô∏è‚É£ T·∫°o project...');
    let project = await Project.findOne({ code: 'ECOMMERCE_2024' });
    
    if (!project) {
      const projectData = {
        name: 'D·ª± √°n E-commerce Platform',
        code: 'ECOMMERCE_2024',
        description: 'Ph√°t tri·ªÉn n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ hi·ªán ƒë·∫°i',
        status: 'active',
        priority: 'high',
        partner: {
          id: partner._id,
          name: partner.name,
          contactPerson: partner.contact.primaryContact.name,
          email: partner.contact.primaryContact.email,
          phone: partner.contact.primaryContact.phone
        },
        gitConfig: {
          repository: 'https://github.com/techsolutions/ecommerce-platform',
          branch: 'main'
        },
        timeline: {
          startDate: new Date('2024-01-01'),
          endDate: new Date('2024-12-31'),
          estimatedDuration: 365
        },
        createdBy: adminUser._id
      };
      
      project = new Project(projectData);
      await project.save();
      console.log('   ‚úÖ T·∫°o m·ªõi project');
    } else {
      console.log('   ‚ÑπÔ∏è Project ƒë√£ t·ªìn t·∫°i');
    }

    // 5. T·∫°o modules
    console.log('\n5Ô∏è‚É£ T·∫°o modules...');
    const modulesData = [
      {
        name: 'User Management Module',
        code: 'USER_MGMT',
        description: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng, ph√¢n quy·ªÅn v√† x√°c th·ª±c',
        status: 'completed',
        priority: 'high',
        project: project._id,
        delivery: {
          source: 'partner',
          partner: partner._id,
          team: 'partner-team'
        },
        timeline: {
          startDate: new Date('2024-01-01'),
          endDate: new Date('2024-03-31'),
          estimatedDuration: 90
        },
        technicalInfo: {
          technology: ['React', 'Node.js', 'MongoDB'],
          framework: ['Express', 'Redux'],
          database: 'MongoDB',
          estimatedEffort: 240
        },
        createdBy: adminUser._id
      },
      {
        name: 'Product Catalog Module',
        code: 'PRODUCT_CAT',
        description: 'Qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m v√† th√¥ng tin chi ti·∫øt',
        status: 'in-development',
        priority: 'medium',
        project: project._id,
        delivery: {
          source: 'partner',
          partner: partner._id,
          team: 'partner-team'
        },
        timeline: {
          startDate: new Date('2024-02-01'),
          endDate: new Date('2024-05-31'),
          estimatedDuration: 120
        },
        technicalInfo: {
          technology: ['React', 'Node.js', 'MongoDB'],
          framework: ['Express', 'Redux'],
          database: 'MongoDB',
          estimatedEffort: 320
        },
        createdBy: adminUser._id
      },
      {
        name: 'Order Management Module',
        code: 'ORDER_MGMT',
        description: 'X·ª≠ l√Ω ƒë∆°n h√†ng, thanh to√°n v√† v·∫≠n chuy·ªÉn',
        status: 'planning',
        priority: 'high',
        project: project._id,
        delivery: {
          source: 'partner',
          partner: partner._id,
          team: 'partner-team'
        },
        timeline: {
          startDate: new Date('2024-04-01'),
          endDate: new Date('2024-08-31'),
          estimatedDuration: 150
        },
        technicalInfo: {
          technology: ['React', 'Node.js', 'MongoDB'],
          framework: ['Express', 'Redux'],
          database: 'MongoDB',
          estimatedEffort: 400
        },
        createdBy: adminUser._id
      }
    ];

    for (const moduleData of modulesData) {
      let module = await Module.findOne({ code: moduleData.code });
      if (!module) {
        module = new Module(moduleData);
        await module.save();
        console.log(`   ‚úÖ T·∫°o m·ªõi module: ${module.name}`);
      } else {
        console.log(`   ‚ÑπÔ∏è Module ƒë√£ t·ªìn t·∫°i: ${module.name}`);
      }
    }

    // 6. C·∫≠p nh·∫≠t th·ªëng k√™ partner
    console.log('\n6Ô∏è‚É£ C·∫≠p nh·∫≠t th·ªëng k√™ partner...');
    await partner.updateStatistics();
    console.log('   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªëng k√™');

    console.log('\nüéâ Setup d·ªØ li·ªáu ƒë·ªëi t√°c ho√†n th√†nh!');
    console.log('\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:');
    console.log('   Email: partner@techsolutions.com');
    console.log('   Password: partner123');
    console.log('   Role: partner');
    console.log('\nüîó Truy c·∫≠p portal ƒë·ªëi t√°c: http://localhost:5173/partner');

  } catch (error) {
    console.error('\n‚ùå L·ªói setup d·ªØ li·ªáu:', error.message);
    if (error.code === 11000) {
      console.log('üí° G·ª£i √Ω: D·ªØ li·ªáu c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i, h√£y ki·ªÉm tra l·∫°i');
    }
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

setupPartnerData(); 